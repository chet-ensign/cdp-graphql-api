package org.oasis_open.contextserver.graphql;

import graphql.schema.*;
import graphql.servlet.GraphQLQueryProvider;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import static graphql.Scalars.GraphQLID;
import static graphql.Scalars.GraphQLLong;
import static graphql.Scalars.GraphQLString;
import static graphql.schema.GraphQLFieldDefinition.newFieldDefinition;
import static graphql.schema.GraphQLObjectType.newObject;
import static graphql.schema.GraphQLArgument.newArgument;

/**
 * Created by loom on 20.04.17.
 */
@Component(
        name = "CXSEventGraphQLProvider",
        immediate = true
)
public class CXSEventGraphQLProvider implements GraphQLQueryProvider {

    private EventService eventService;

    private static GraphQLObjectType CXSProperties = newObject()
            .name("Properties")
            .description("Generic key-value (string,string) properties")
            .field(newFieldDefinition()
                    .type(GraphQLID)
                    .name("key")
                    .description("A unique identifier for the property")
                    .dataFetcher(new DataFetcher() {
                        public Object get(DataFetchingEnvironment environment) {
                            Map.Entry<Object,Object> propertyEntry = environment.getSource();
                            return propertyEntry.getKey();
                        }
                    })
            )
            .field(newFieldDefinition()
                    .type(GraphQLID)
                    .name("value")
                    .description("A value for the property")
                    .dataFetcher(new DataFetcher() {
                        public Object get(DataFetchingEnvironment environment) {
                            Map.Entry<Object,Object> propertyEntry = environment.getSource();
                            return propertyEntry.getValue();
                        }
                    })
            )
            .build();

    private static GraphQLObjectType CXSGraphQLEvent = newObject()
            .name("Event")
            .description("An event is generated by user interacting with the Context Server")
            .field(newFieldDefinition()
                    .type(GraphQLID)
                    .name("id")
                    .description("A unique identifier for the event")
                    .dataFetcher(new DataFetcher() {
                        public Object get(DataFetchingEnvironment environment) {
                            Event event = environment.getSource();
                            return event.getId();
                        }
                    })
            )
            .field(newFieldDefinition()
                    .type(GraphQLString)
                    .name("eventType")
                    .description("An identifier for the event type")
                    .dataFetcher(new DataFetcher() {
                        public Object get(DataFetchingEnvironment environment) {
                            Event event = environment.getSource();
                            return event.getEventType();
                        }
                    })
            )
            .field(newFieldDefinition()
                    .type(GraphQLLong)
                    .name("timestamp")
                    .description("The difference, measured in milliseconds, between the current time and midnight, January 1, 1970 UTC.")
                    .dataFetcher(new DataFetcher() {
                        public Object get(DataFetchingEnvironment environment) {
                            Event event = environment.getSource();
                            return event.getTimestamp();
                        }
                    }))
            .field(newFieldDefinition()
                    .type(GraphQLString)
                    .name("subject")
                    .description("The entity that has fired the event (using the profile)")
                    .dataFetcher(new DataFetcher() {
                        public Object get(DataFetchingEnvironment environment) {
                            Event event = environment.getSource();
                            return event.getSubject();
                        }
                    }))
            .field(newFieldDefinition()
                    .type(GraphQLString)
                    .name("object")
                    .description("The object on which the event was fired.")
                    .dataFetcher(new DataFetcher() {
                        public Object get(DataFetchingEnvironment environment) {
                            Event event = environment.getSource();
                            return event.getObject();
                        }
                    })
            )
            .field(newFieldDefinition()
                    .type(new GraphQLList(CXSProperties))
                    .name("properties")
                    .description("Generic properties for the event")
                    .dataFetcher(new DataFetcher() {
                        public Object get(DataFetchingEnvironment environment) {
                            Event event = environment.getSource();
                            return new ArrayList<Map.Entry<Object,Object>>(event.getProperties().entrySet());
                        }
                    })
            )
            .build();

    @Reference
    public void setEventService(EventService eventService) {
        this.eventService = eventService;
    }

    public Collection<GraphQLFieldDefinition> getQueries() {
        List<GraphQLFieldDefinition> fieldDefinitions = new ArrayList<GraphQLFieldDefinition>();
        fieldDefinitions.add(
                newFieldDefinition()
                        .name("findEvents")
                        .description("An access point to retrieve CXS events")
                        .type(CXSGraphQLProvider.newCXSConnection("Event", CXSGraphQLEvent))
                        .argument(newArgument()
                                .name("filter")
                                .description("A filter for the events")
                                .type(CXSGraphQLProvider.CXSFilterFunction)
                                .build())
                        .argument(newArgument()
                                .name("orderBy")
                                .description("A list of fields to sort by")
                                .type(new GraphQLList(CXSGraphQLProvider.CXSOrderBy))
                                .build())
                        .argument(CXSGraphQLProvider.newRelayCursorArguments())
                        .dataFetcher(new DataFetcher() {
                            public Object get(DataFetchingEnvironment environment) {
                                Map<String,?> filterArgument = environment.getArgument("filter");
                                List<Map<String,?>> orderBysArgument = environment.getArgument("orderBy");
                                Long firstElements = environment.getArgument("first");
                                if (firstElements == null) {
                                    firstElements = 0L;
                                }
                                String afterCursor = environment.getArgument("after");
                                Long lastElements = environment.getArgument("last");
                                if (lastElements == null) {
                                    lastElements = 50L;
                                }
                                String beforeCursor = environment.getArgument("before");
                                CXSFilterFunction filterFunction = null;
                                if (filterArgument != null) {
                                    filterFunction = new CXSFilterFunction(filterArgument);
                                }

                                List<CXSOrderBy> orderBys = new ArrayList<CXSOrderBy>();
                                if (orderBysArgument != null) {
                                    for (Map<String, ?> orderByArgument : orderBysArgument) {
                                        orderBys.add(new CXSOrderBy(orderByArgument));
                                    }
                                }
                                return eventService.findEvents(filterFunction, orderBys, firstElements, afterCursor, lastElements, beforeCursor);
                            }
                        })
                        .build());
        return fieldDefinitions;
    }


}
